"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
" (_)_/ |_|_| |_| |_|_|  \___|
"
" 2020 Győri Sándor (AlexAegis) <alexaegis@gmail.com>
"
" Vim and Neovim both start with this file because VIMINIT is set

""""""""""""""""
"  Environment "
""""""""""""""""
set runtimepath^=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after
set directory=$XDG_CACHE_HOME/vim/swap//,.,~/tmp,/var/tmp,/tmp
set backupdir=$XDG_CONFIG_HOME/vim/backup//,.,~/tmp,~/
set undodir=$XDG_CONFIG_HOME/vim/undo//,.
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
let &packpath=&runtimepath
if has('nvim')
	set viminfo+=n$XDG_CACHE_HOME/nvim/viminfo
else
	set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif
""""""""""""
"  Common  "
""""""""""""
"" General
let mapleader=' '
let maplocalleader=' '
set undofile
set visualbell					" Silence
set updatetime=100				" Default is 4000
set number relativenumber		" Gutter numbers
set splitbelow splitright		" Order of window splitting
set colorcolumn=80				" ruler
set nocompatible
set scrolloff=4
set fillchars+=vert:▍
" set cryptmethod=blowfish2
set mouse=a

" hi Normal ctermbg=235 ctermfg=250 guibg=#262626 guifg=#bcbcbc cterm=NONE gui=NONE
" hi Visual ctermbg=110 ctermfg=235 guibg=#8fafd7 guifg=#262626 cterm=NONE gui=NONE
" hi SpecialKey ctermbg=NONE ctermfg=NONE guibg=#8fafd744 guifg=NONE cterm=NONE gui=NONE
" colorscheme apprentice

hi Normal ctermbg=none guibg=NONE
hi NonText ctermbg=none guibg=NONE
hi SignColumn guibg=NONE ctermbg=NONE

" autocmd VimEnter GitGutterLineNrHighlightsDisable

set encoding=utf-8
" TODO: Make non printable characters show in only visual mode (always)
" How non-printable things are shown
" set listchars=eol:$,tab:▰▱,nbsp:⋅,trail:~,extends:>,precedes:<
" set list                              " show non-print characters,...
set number                            " show line number for current line,...
set relativenumber                    " and relative line numbers for others
set cursorline                        " highlight the line with the cursor
set wildmenu                          " use command-line completion menu,...
set wildmode=longest:full             " with wildmode
set wildchar=<Tab>
" Tab
set autoindent                        " enable auto-indentation
set tabstop=4            " number of spaces used as tab for file
set softtabstop=4        " number of spaces used as tab for editing
set shiftwidth=4         " number of spaces used to autoindent
" set expandtab            " expand tabs into spaces
set smarttab             " smart tabulation and backspace
set bs=indent,eol,start  " allow backspacing over everything

"let &t_8f = "\e[38;2;%lu;%lu;%lum"
"let &t_8b = "\e[48;2;%lu;%lu;%lum"

" Move a line of text using TODO: Respect indentation


"set ignorecase						" assume patterns are case insensitive,...
set smartcase						" ...when lowercase-only is used
set incsearch						" start searching as you type

set ttyfast							" assume the terminal is fast
set mouse=a							" enable mouse in all modes

set guifont=Iosevka\ 11				" set font in gvim
set guioptions-=T					" no toolbar in gvim
set guioptions-=m					" no menubar in gvim
set guioptions-=r					" no right scrollbar in gvim
set guioptions-=L					" no left scrollbar when v.split in gvim

"" Filetypes & highlighting
filetype plugin indent on
syntax on
""""""""""
"  Plug  "
""""""""""
"" Autoload if missing
if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
	silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"" Load plugins
call plug#begin('$XDG_CONFIG_HOME/vim/bundle')
Plug 'junegunn/vim-plug'
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'machakann/vim-highlightedyank'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree' ", { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'camspiers/animate.vim'
Plug 'camspiers/lens.vim'
Plug 'mg979/vim-visual-multi', { 'branch': 'master' }
Plug 'flazz/vim-colorschemes'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'chuling/vim-equinusocio-material'
Plug 'sainnhe/gruvbox-material'
Plug 'rainglow/vim'
Plug 'mkarmona/colorsbox'
Plug 'neoclide/jsonc.vim'
Plug 'majutsushi/tagbar'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rust-lang/rust.vim'
Plug 'puremourning/vimspector'
Plug 'doums/coBra' "
Plug 'preservim/nerdcommenter'
Plug 'ryanoasis/vim-devicons'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-eunuch'
Plug 'will133/vim-dirdiff'
Plug 'AndrewRadev/linediff.vim'
" Don't use this plugin if wal isn't installed and enabled
if executable('wal') && ($WAL != '')
	Plug 'dylanaraps/wal.vim'
endif
call plug#end()

"" Deprecated plugins
" Plug 'airblade/vim-gitgutter' " Faster than coc-git for display,
								" but tab switching is really slow
" Plug 'jiangmiao/auto-pairs' " Causes problems with coc enter accept
" Plug 'alvan/vim-closetag' " In favor of doums/coBra

"" Plugin Configuration

""" camspiers/animate.vim
" TODO: turn back on
let g:animate#distribute_space = 0
""" junegunn/fzf
map <silent> <C-p> :Files<CR>
""" scrooloose/nerdtree
let g:NERDTreeHijackNetrw = 1	" On by default, just to be sure
let NERDTreeShowHidden=1
"autocmd VimEnter * NERDTree					" Autotart NERDTree
"autocmd VimEnter * wincmd p		" Go to previous (last accessed) window.
autocmd TabNew * call feedkeys(":NERDTreeMirrorOpen\<CR>")
" autocmd BufWinEnter * NERDTreeMirror | 40wincmd | | wincmd p

let g:nerdtree_tabs_open_on_console_startup=1

map <silent> <C-e> :NERDTreeFocus<CR>
map <silent> <leader><e> :NERDTreeFocus<CR>
let g:NERDTreeWinSize=30
let g:gitgutter_eager=0
" Store the bookmarks file
let NERDTreeBookmarksFile=expand("$XDG_CONFIG_HOME/vim/nerd_tree_bookmarks")
" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1
" Exit NERDTree if it's the last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
	\ b:NERDTree.isTabTree()) | q | endif

""" scrooloose/nerdcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
""" Xuyuanp/nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
		\ "Modified"  : "✹",
		\ "Staged"    : "✚",
		\ "Untracked" : "✭",
		\ "Renamed"   : "➜",
		\ "Unmerged"  : "═",
		\ "Deleted"   : "✖",
		\ "Dirty"     : "✗",
		\ "Clean"     : "✔︎",
		\ 'Ignored'   : '☒',
		\ "Unknown"   : "?"
		\ }
""" prettier/vim-prettier
let g:prettier#exec_cmd_path = "prettier"
let g:prettier#autoformat = 1
""" rust-lang/rust.vim
let g:rustfmt_autosave = 1
:nnoremap <F6> :RustRun<CR>
""" vim-airline/vim-airline
" Disable the default mode show
set noshowmode " bottom cmd height can be set with cmdheight=1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
""" sainnhe/gruvbox-material

" for dark version
set background=dark

" for light version
" set background=light

" set contrast
" this configuration option should be placed before `colorscheme gruvbox-material`
" available values: 'hard', 'medium'(default), 'soft'
let g:gruvbox_material_background = 'hard'
let g:gruvbox_material_transparent_background = 1

" For airline
" Only set airline theme if not using wal
if ! executable('wal') && $WAL == ''
	let g:airline_theme = 'gruvbox_material'
endif

" Colorschemes are not installed on their PlugInstall
try
	if executable('wal') && $WAL != ''
    	colorscheme wal
	else
		" Needed for most colorschemes, but breaks the `wal` theme
		set termguicolors

		" colorscheme laravel
    	colorscheme gruvbox-material
	endif
catch

endtry

""" airblade/vim-gitgutter
let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_removed = '█'
let g:gitgutter_sign_removed_first_line = '█'
let g:gitgutter_sign_modified_removed = '█'
let g:gitgutter_highlight_linenrs = 1
""" neoclide/coc.nvim
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
nmap <F2> <Plug>(coc-rename)
" Ctrl-Spacpe would be preferrable
nnoremap <silent> <leader><space> :CocAction<cr>

command! -nargs=0 Prettier :CocCommand prettier.formatFile

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<TAB>" :
	\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Accept completion with Enter.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
	\"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

" Highlight the symbol and its references when holding the cursor.
" TODO: DOES NOT WORK IN WSL
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder.
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"" coc extensions
"""
" TODO: let g:coc_global_extensions^='coc-emmet'
"""""""""""""
"  Folding  "
"""""""""""""
"" Common
" set foldmethod=syntax
set foldlevelstart=2
"set nofoldenable	" No fold on launch
"" Vim
" Autofolding .vimrc
" see http://vimcasts.org/episodes/writing-a-custom-fold-expression/
""" Foldlevel definition
function! VimFolds(lnum)
	let s:thisline = getline(a:lnum)
	if match(s:thisline, '^"" ') >= 0
		return '>2'
	endif
	if match(s:thisline, '^""" ') >= 0
		return '>3'
	endif
	let s:two_following_lines = 0
	if line(a:lnum) + 2 <= line('$')
		let s:line_1_after = getline(a:lnum+1)
		let s:line_2_after = getline(a:lnum+2)
		let s:two_following_lines = 1
	endif
	if !s:two_following_lines
			return '='
		endif
	else
		if (match(s:thisline, '^"""""') >= 0) &&
			 \ (match(s:line_1_after, '^"  ') >= 0) &&
			 \ (match(s:line_2_after, '^""""') >= 0)
			return '>1'
		else
			return '='
		endif
	endif
endfunction
""" Foldtext definition
function! VimFoldText()
	" handle special case of normal comment first
	let s:info = '('.string(v:foldend-v:foldstart).' l)'
	if v:foldlevel == 1
		let s:line = ' ◇ '.getline(v:foldstart+1)[3:-2]
	elseif v:foldlevel == 2
		let s:line = '   ●  '.getline(v:foldstart)[3:]
	elseif v:foldlevel == 3
		let s:line = '     ▪ '.getline(v:foldstart)[4:]
	endif
	if strwidth(s:line) > 80 - len(s:info) - 3
		return s:line[:79-len(s:info)-3+len(s:line)-strwidth(s:line)].'...'.s:info
	else
		return s:line.repeat(' ', 80 - strwidth(s:line) - len(s:info)).s:info
	endif
endfunction
" set foldsettings automatically for vim files
augroup fold_vimrc
	autocmd!
	autocmd FileType vim
		\ setlocal foldmethod=expr |
		\ setlocal foldexpr=VimFolds(v:lnum) |
		\ setlocal foldtext=VimFoldText() |
		\ set foldcolumn=2 foldminlines=2
augroup END
"" Markdown
let g:markdown_folding = 0

"" Keybindings
vnoremap <leader><space> zf " Using leader space (double space)
" nmap <silent> <leader><space> @=(foldlevel('.')?'za':"  ")<CR>
noremap <2-LeftMouse> za " Using double click
"""""""""""""""""
"  Keybindings  "
"""""""""""""""""
"" General
nnoremap <C-q> :q<CR> " Quit
nnoremap <C-q><C-q> :qall!<CR> " Quit all
noremap <silent> <M-l> :bnext<CR>
noremap <silent> <M-Right> :bnext<CR>
noremap <silent> <M-Tab> :bnext<CR>
noremap <silent> <M-h> :bprev<CR>
noremap <silent> <M-Left> :bprev<CR>
noremap <silent> <leader>t :tabnew<CR>
noremap <silent> <leader>h :tabnext<CR>
noremap <silent> <leader><Right> :tabnext<CR>
noremap <silent> <leader><Left> :tabprev<CR>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>
noremap <leader><tab> :tabnext<cr>

noremap <S-h> <C-w>h
noremap <S-j> <C-w>j
noremap <S-k> <C-w>k
noremap <S-l> <C-w>l
noremap <S-Left> <C-w>h
noremap <S-Down> <C-w>j
noremap <S-Up> <C-w>k
noremap <S-Right> <C-w>l

noremap <C-h> :vertical resize +5<cr>
noremap <C-j> :resize +5<cr>
noremap <C-k> :resize -5<cr>
noremap <C-l> :vertical resize -5<cr>
noremap <C-Left> :vertical resize +5<cr>
noremap <C-Down> :resize +5<cr>
noremap <C-Up> :resize -5<cr>
noremap <C-Rightl> :vertical resize -5<cr>

function! OpenTerminal() abort
	" TODO: Finish, should be a toggle
	new term://$SHELL
	" Send window to bottom and start with small height
	wincmd J | resize 1
	" Animate height to 66%
	call animate#window_percent_height(0.4)
endfunction

noremap <silent> <M-`> :call OpenTerminal()<cr>i

"" Edit vimrc
nnoremap <leader>ec :echo 'Hello World!'<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
"" Line movements
nmap <silent><M-j> mz:m+<cr>`z
nmap <silent><M-k> mz:m-2<cr>`z
vmap <silent><M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <silent><M-k> :m'<-2<cr>`>my`<mzgv`yo`z
" Clone a line of text
nmap <silent><S-M-j> YP<cr>
nmap <silent><S-M-k> Yp2k<cr>
"" Hungry Delete.
" [source](https://www.reddit.com/r/vim/comments/7gqowu)
inoremap <s-bs> <bs>			" shift + backspace to do regular backspace
inoremap <silent><expr><bs>
	\ (&indentexpr isnot '' ? &indentkeys : &cinkeys) =~? '!\^F' &&
	\ &backspace =~? '.*eol\&.*start\&.*indent\&' &&
	\ !search('\S','nbW',line('.')) ? (col('.') != 1 ? "\<C-U>" : "") .
	\ "\<bs>" . (getline(line('.')-1) =~ '\S' ? "" : "\<C-F>") : "\<bs>"
"" Terminal
:tnoremap <Esc> <C-\><C-n>
" fzf

" function! s:fzf_statusline()
"   " Override statusline as you like
"   highlight fzf1 ctermfg=161 ctermbg=251
"   highlight fzf2 ctermfg=23 ctermbg=251
"   highlight fzf3 ctermfg=237 ctermbg=251
"   setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
" endfunction
"
" autocmd! User FzfStatusLine call <SID>fzf_statusline()



" TODO: Check this out: https://dev.to/gaveen/my-vim-story-594d

function! InsertTabWrapper()
	if pumvisible()
		return "\<c-n>"
	endif
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<tab>"
	else
		return "\<c-x>\<c-o>"
	endif
endfunction
inoremap <expr><tab> InsertTabWrapper()
inoremap <expr><s-tab> pumvisible()?"\<c-p>":"\<c-d>"
